//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PICO.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


namespace SeuProjeto.Generated;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class PICOParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, ID=23, NUMBER=24, WS=25, 
		COMMENT=26;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_read_stmt = 2, RULE_print_stmt = 3, 
		RULE_assign_stmt = 4, RULE_if_stmt = 5, RULE_while_stmt = 6, RULE_statements = 7, 
		RULE_condition = 8, RULE_rel_op = 9, RULE_expression = 10, RULE_term = 11, 
		RULE_factor = 12;
	public static readonly string[] ruleNames = {
		"program", "statement", "read_stmt", "print_stmt", "assign_stmt", "if_stmt", 
		"while_stmt", "statements", "condition", "rel_op", "expression", "term", 
		"factor"
	};

	private static readonly string[] _LiteralNames = {
		null, "'read'", "';'", "'print'", "'='", "'if'", "'then'", "'else'", "'end'", 
		"'while'", "'do'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", 
		"'-'", "'*'", "'/'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "ID", 
		"NUMBER", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PICO.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PICOParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PICOParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PICOParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PICOParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPICOVisitor<TResult> typedVisitor = visitor as IPICOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__8) | (1L << ID))) != 0)) {
				{
				{
				State = 26;
				statement();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 32;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Read_stmtContext read_stmt() {
			return GetRuleContext<Read_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Print_stmtContext print_stmt() {
			return GetRuleContext<Print_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_stmtContext assign_stmt() {
			return GetRuleContext<Assign_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_stmtContext while_stmt() {
			return GetRuleContext<While_stmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPICOVisitor<TResult> typedVisitor = visitor as IPICOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 39;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				read_stmt();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35;
				print_stmt();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 36;
				assign_stmt();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 37;
				if_stmt();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 5);
				{
				State = 38;
				while_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Read_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PICOParser.ID, 0); }
		public Read_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.EnterRead_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.ExitRead_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPICOVisitor<TResult> typedVisitor = visitor as IPICOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRead_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Read_stmtContext read_stmt() {
		Read_stmtContext _localctx = new Read_stmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_read_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			Match(T__0);
			State = 42;
			Match(ID);
			State = 43;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Print_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Print_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.EnterPrint_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.ExitPrint_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPICOVisitor<TResult> typedVisitor = visitor as IPICOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Print_stmtContext print_stmt() {
		Print_stmtContext _localctx = new Print_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_print_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(T__2);
			State = 46;
			expression();
			State = 47;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PICOParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.EnterAssign_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.ExitAssign_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPICOVisitor<TResult> typedVisitor = visitor as IPICOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_stmtContext assign_stmt() {
		Assign_stmtContext _localctx = new Assign_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_assign_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			Match(ID);
			State = 50;
			Match(T__3);
			State = 51;
			expression();
			State = 52;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		public StatementsContext thenBlock;
		public StatementsContext elseBlock;
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext[] statements() {
			return GetRuleContexts<StatementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements(int i) {
			return GetRuleContext<StatementsContext>(i);
		}
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPICOVisitor<TResult> typedVisitor = visitor as IPICOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(T__4);
			State = 55;
			condition();
			State = 56;
			Match(T__5);
			State = 57;
			_localctx.thenBlock = statements();
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 58;
				Match(T__6);
				State = 59;
				_localctx.elseBlock = statements();
				}
			}

			State = 62;
			Match(T__7);
			State = 63;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public While_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.EnterWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.ExitWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPICOVisitor<TResult> typedVisitor = visitor as IPICOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_stmtContext while_stmt() {
		While_stmtContext _localctx = new While_stmtContext(Context, State);
		EnterRule(_localctx, 12, RULE_while_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(T__8);
			State = 66;
			condition();
			State = 67;
			Match(T__9);
			State = 68;
			statements();
			State = 69;
			Match(T__7);
			State = 70;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPICOVisitor<TResult> typedVisitor = visitor as IPICOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 14, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__8) | (1L << ID))) != 0)) {
				{
				{
				State = 72;
				statement();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rel_opContext rel_op() {
			return GetRuleContext<Rel_opContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPICOVisitor<TResult> typedVisitor = visitor as IPICOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 16, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			expression();
			State = 79;
			rel_op();
			State = 80;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rel_opContext : ParserRuleContext {
		public Rel_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rel_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.EnterRel_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.ExitRel_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPICOVisitor<TResult> typedVisitor = visitor as IPICOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRel_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rel_opContext rel_op() {
		Rel_opContext _localctx = new Rel_opContext(Context, State);
		EnterRule(_localctx, 18, RULE_rel_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPICOVisitor<TResult> typedVisitor = visitor as IPICOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			term();
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16 || _la==T__17) {
				{
				{
				State = 85;
				_la = TokenStream.LA(1);
				if ( !(_la==T__16 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 86;
				term();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPICOVisitor<TResult> typedVisitor = visitor as IPICOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 22, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			factor();
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__18 || _la==T__19) {
				{
				{
				State = 93;
				_la = TokenStream.LA(1);
				if ( !(_la==T__18 || _la==T__19) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 94;
				factor();
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(PICOParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(PICOParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPICOListener typedListener = listener as IPICOListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPICOVisitor<TResult> typedVisitor = visitor as IPICOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 24, RULE_factor);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				Match(NUMBER);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				Match(ID);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				Match(T__20);
				State = 103;
				expression();
				State = 104;
				Match(T__21);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1C', 'o', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\a', '\x2', '\x1E', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '!', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '*', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '?', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\a', '\t', 'L', '\n', '\t', '\f', '\t', '\xE', '\t', 'O', 
		'\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 
		'Z', '\n', '\f', '\f', '\f', '\xE', '\f', ']', '\v', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', '\x62', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\x65', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 'm', '\n', '\xE', 
		'\x3', '\xE', '\x2', '\x2', '\xF', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x2', '\x5', '\x3', 
		'\x2', '\r', '\x12', '\x3', '\x2', '\x13', '\x14', '\x3', '\x2', '\x15', 
		'\x16', '\x2', 'l', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x4', 
		')', '\x3', '\x2', '\x2', '\x2', '\x6', '+', '\x3', '\x2', '\x2', '\x2', 
		'\b', '/', '\x3', '\x2', '\x2', '\x2', '\n', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x38', '\x3', '\x2', '\x2', '\x2', '\xE', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'M', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'P', '\x3', '\x2', '\x2', '\x2', '\x14', 'T', '\x3', '\x2', '\x2', '\x2', 
		'\x16', 'V', '\x3', '\x2', '\x2', '\x2', '\x18', '^', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', 'l', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\x5', 
		'\x4', '\x3', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\x3', '\x2', 
		'\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', 
		'\x2', '\x2', '\x3', '#', '\x3', '\x3', '\x2', '\x2', '\x2', '$', '*', 
		'\x5', '\x6', '\x4', '\x2', '%', '*', '\x5', '\b', '\x5', '\x2', '&', 
		'*', '\x5', '\n', '\x6', '\x2', '\'', '*', '\x5', '\f', '\a', '\x2', '(', 
		'*', '\x5', '\xE', '\b', '\x2', ')', '$', '\x3', '\x2', '\x2', '\x2', 
		')', '%', '\x3', '\x2', '\x2', '\x2', ')', '&', '\x3', '\x2', '\x2', '\x2', 
		')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '(', '\x3', '\x2', '\x2', 
		'\x2', '*', '\x5', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\x3', 
		'\x2', '\x2', ',', '-', '\a', '\x19', '\x2', '\x2', '-', '.', '\a', '\x4', 
		'\x2', '\x2', '.', '\a', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', 
		'\x5', '\x2', '\x2', '\x30', '\x31', '\x5', '\x16', '\f', '\x2', '\x31', 
		'\x32', '\a', '\x4', '\x2', '\x2', '\x32', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\a', '\x19', '\x2', '\x2', '\x34', '\x35', '\a', 
		'\x6', '\x2', '\x2', '\x35', '\x36', '\x5', '\x16', '\f', '\x2', '\x36', 
		'\x37', '\a', '\x4', '\x2', '\x2', '\x37', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\a', '\a', '\x2', '\x2', '\x39', ':', '\x5', '\x12', 
		'\n', '\x2', ':', ';', '\a', '\b', '\x2', '\x2', ';', '>', '\x5', '\x10', 
		'\t', '\x2', '<', '=', '\a', '\t', '\x2', '\x2', '=', '?', '\x5', '\x10', 
		'\t', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', 
		'\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', 
		'\n', '\x2', '\x2', '\x41', '\x42', '\a', '\x4', '\x2', '\x2', '\x42', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\v', '\x2', '\x2', 
		'\x44', '\x45', '\x5', '\x12', '\n', '\x2', '\x45', '\x46', '\a', '\f', 
		'\x2', '\x2', '\x46', 'G', '\x5', '\x10', '\t', '\x2', 'G', 'H', '\a', 
		'\n', '\x2', '\x2', 'H', 'I', '\a', '\x4', '\x2', '\x2', 'I', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'L', '\x5', '\x4', '\x3', '\x2', 'K', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 
		'Q', '\x5', '\x16', '\f', '\x2', 'Q', 'R', '\x5', '\x14', '\v', '\x2', 
		'R', 'S', '\x5', '\x16', '\f', '\x2', 'S', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\t', '\x2', '\x2', '\x2', 'U', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'V', '[', '\x5', '\x18', '\r', '\x2', 'W', 'X', '\t', '\x3', 
		'\x2', '\x2', 'X', 'Z', '\x5', '\x18', '\r', '\x2', 'Y', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'Z', ']', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '\x17', '\x3', 
		'\x2', '\x2', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', '\x63', 
		'\x5', '\x1A', '\xE', '\x2', '_', '`', '\t', '\x4', '\x2', '\x2', '`', 
		'\x62', '\x5', '\x1A', '\xE', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'm', '\a', '\x1A', '\x2', '\x2', 'g', 'm', '\a', '\x19', 
		'\x2', '\x2', 'h', 'i', '\a', '\x17', '\x2', '\x2', 'i', 'j', '\x5', '\x16', 
		'\f', '\x2', 'j', 'k', '\a', '\x18', '\x2', '\x2', 'k', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x66', '\x3', '\x2', '\x2', '\x2', 'l', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'l', 'h', '\x3', '\x2', '\x2', '\x2', 'm', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\t', '\x1F', ')', '>', 'M', '[', '\x63', 
		'l',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
